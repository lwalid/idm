/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VideoGenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoGen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoGenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVideoGenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVideoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideoVideoParserRuleCall_3_0 = (RuleCall)cVideoAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VideoGen:
		//	{VideoGen} "VideoGen" "{" video+=Video* "}";
		@Override public ParserRule getRule() { return rule; }

		//{VideoGen} "VideoGen" "{" video+=Video* "}"
		public Group getGroup() { return cGroup; }

		//{VideoGen}
		public Action getVideoGenAction_0() { return cVideoGenAction_0; }

		//"VideoGen"
		public Keyword getVideoGenKeyword_1() { return cVideoGenKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//video+=Video*
		public Assignment getVideoAssignment_3() { return cVideoAssignment_3; }

		//Video
		public RuleCall getVideoVideoParserRuleCall_3_0() { return cVideoVideoParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Video");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Video:
		//	Mandatory | Optional | Alternative;
		@Override public ParserRule getRule() { return rule; }

		//Mandatory | Optional | Alternative
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_0() { return cMandatoryParserRuleCall_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_1() { return cOptionalParserRuleCall_1; }

		//Alternative
		public RuleCall getAlternativeParserRuleCall_2() { return cAlternativeParserRuleCall_2; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoSeqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoSeqVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoSeqAssignment_1.eContents().get(0);
		
		//Mandatory:
		//	"mandatory" videoSeq=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"mandatory" videoSeq=VideoSeq
		public Group getGroup() { return cGroup; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//videoSeq=VideoSeq
		public Assignment getVideoSeqAssignment_1() { return cVideoSeqAssignment_1; }

		//VideoSeq
		public RuleCall getVideoSeqVideoSeqParserRuleCall_1_0() { return cVideoSeqVideoSeqParserRuleCall_1_0; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoSeqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoSeqVideoSeqParserRuleCall_1_0 = (RuleCall)cVideoSeqAssignment_1.eContents().get(0);
		
		//Optional:
		//	"Optional" videoSeq=VideoSeq;
		@Override public ParserRule getRule() { return rule; }

		//"Optional" videoSeq=VideoSeq
		public Group getGroup() { return cGroup; }

		//"Optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//videoSeq=VideoSeq
		public Assignment getVideoSeqAssignment_1() { return cVideoSeqAssignment_1; }

		//VideoSeq
		public RuleCall getVideoSeqVideoSeqParserRuleCall_1_0() { return cVideoSeqVideoSeqParserRuleCall_1_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVideoSeqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideoSeqVideoSeqParserRuleCall_3_0 = (RuleCall)cVideoSeqAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Alternative:
		//	"Alternative" name=ID "{" videoSeq+=VideoSeq+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Alternative" name=ID "{" videoSeq+=VideoSeq+ "}"
		public Group getGroup() { return cGroup; }

		//"Alternative"
		public Keyword getAlternativeKeyword_0() { return cAlternativeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//videoSeq+=VideoSeq+
		public Assignment getVideoSeqAssignment_3() { return cVideoSeqAssignment_3; }

		//VideoSeq
		public RuleCall getVideoSeqVideoSeqParserRuleCall_3_0() { return cVideoSeqVideoSeqParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//VideoSeq:
		//	"VideoSeq" id=ID name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"VideoSeq" id=ID name=STRING
		public Group getGroup() { return cGroup; }

		//"VideoSeq"
		public Keyword getVideoSeqKeyword_0() { return cVideoSeqKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final VideoGenElements pVideoGen;
	private final VideoElements pVideo;
	private final MandatoryElements pMandatory;
	private final OptionalElements pOptional;
	private final AlternativeElements pAlternative;
	private final VideoSeqElements pVideoSeq;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGen = new VideoGenElements();
		this.pVideo = new VideoElements();
		this.pMandatory = new MandatoryElements();
		this.pOptional = new OptionalElements();
		this.pAlternative = new AlternativeElements();
		this.pVideoSeq = new VideoSeqElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VideoGen:
	//	{VideoGen} "VideoGen" "{" video+=Video* "}";
	public VideoGenElements getVideoGenAccess() {
		return pVideoGen;
	}
	
	public ParserRule getVideoGenRule() {
		return getVideoGenAccess().getRule();
	}

	//Video:
	//	Mandatory | Optional | Alternative;
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}

	//Mandatory:
	//	"mandatory" videoSeq=VideoSeq;
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Optional:
	//	"Optional" videoSeq=VideoSeq;
	public OptionalElements getOptionalAccess() {
		return pOptional;
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Alternative:
	//	"Alternative" name=ID "{" videoSeq+=VideoSeq+ "}";
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//VideoSeq:
	//	"VideoSeq" id=ID name=STRING;
	public VideoSeqElements getVideoSeqAccess() {
		return pVideoSeq;
	}
	
	public ParserRule getVideoSeqRule() {
		return getVideoSeqAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
